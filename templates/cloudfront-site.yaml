AWSTemplateFormatVersion: '2010-09-09'
Description: ACFS3 - CloudFront with Header Security and site content
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  CertificateArn:
    Description: Certificate locater
    Type: String
  DomainName:
    Description: Apex domain
    Type: String
  SubDomain:
    Description: Subdomain
    Type: String
  S3BucketLogs:
    Description: Logging Bucket
    Type: String
  S3BucketRoot:
    Description: Content Bucket
    Type: String
  S3BucketLogsName:
    Description: Logging Bucket
    Type: String
  S3BucketRootName:
    Description: Content Bucket
    Type: String
  S3BucketRootArn:
    Description: Content Bucket locator
    Type: String
  CreateApex:
    Type: String
  EnableUrlRewrite:
    Description: True, if URL Rewrite /x.html to /x should be enabled.
    Default: false
    Type: String
    AllowedValues: [true, false]
  RedirectToWWW:
    Description: True, if https://example.com should redirect to https://www.example.com.
    Default: false
    Type: String
    AllowedValues: [true, false]

Conditions:
  CreateApexConfig: !Equals
    - !Ref CreateApex
    - 'yes'
  ShouldEnableUrlRewrite:
    !Equals [!Ref EnableUrlRewrite, 'true']
  ShouldRedirectToWWW:
    !Equals [!Ref RedirectToWWW, 'true']

Resources:
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'S3BucketRoot'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: s3:GetObject
            Principal:
              Service: 'cloudfront.amazonaws.com'
            Effect: Allow
            Resource: !Sub '${S3BucketRootArn}/*'
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub '${SubDomain}.${DomainName}'
          - !If [CreateApexConfig, !Ref DomainName, !Ref 'AWS::NoValue']
        DefaultCacheBehavior:
          Compress: true
          DefaultTTL: 86400
          ForwardedValues:
            QueryString: true
          MaxTTL: 31536000
          TargetOriginId: !Sub 'S3-${AWS::StackName}-root'
          ViewerProtocolPolicy: 'redirect-to-https'
          ResponseHeadersPolicyId: !Ref ResponseHeadersPolicy
          FunctionAssociations:
            !If
              - ShouldEnableUrlRewrite
              - - EventType: viewer-request
                  FunctionARN: !GetAtt URLRewriteFunction.FunctionARN
              - !Ref AWS::NoValue
        CustomErrorResponses:
          - ErrorCachingMinTTL: 60
            ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: '/404.html'
          - ErrorCachingMinTTL: 60
            ErrorCode: 403
            ResponseCode: 403
            ResponsePagePath: '/403.html'
        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: 'index.html'
        IPV6Enabled: true
        Logging:
          Bucket: !Ref 'S3BucketLogsName'
          IncludeCookies: false
          Prefix: 'cdn/'
        Origins:
          - DomainName: !Ref 'S3BucketRootName'
            Id: !Sub 'S3-${AWS::StackName}-root'
            OriginAccessControlId: !Ref OriginAccessControl
            S3OriginConfig: {}
        PriceClass: 'PriceClass_All'
        ViewerCertificate:
          AcmCertificateArn: !Ref 'CertificateArn'
          MinimumProtocolVersion: 'TLSv1.1_2016'
          SslSupportMethod: 'sni-only'
      Tags:
        - Key: Solution
          Value: ACFS3

  CloudFrontDistributionApex:
    Type: AWS::CloudFront::Distribution
    Condition: ShouldRedirectToWWW
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub '${DomainName}'
        DefaultCacheBehavior:
          Compress: true
          DefaultTTL: 86400
          ForwardedValues:
            QueryString: true
          MaxTTL: 31536000
          TargetOriginId: !Sub 'S3-${AWS::StackName}-root'
          ViewerProtocolPolicy: 'redirect-to-https'
          ResponseHeadersPolicyId: !Ref ResponseHeadersPolicy
          FunctionAssociations:
              - EventType: viewer-request
                FunctionARN: !GetAtt RedirectToWWWFunction.FunctionARN
        CustomErrorResponses:
          - ErrorCachingMinTTL: 60
            ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: '/404.html'
          - ErrorCachingMinTTL: 60
            ErrorCode: 403
            ResponseCode: 403
            ResponsePagePath: '/403.html'
        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: 'index.html'
        IPV6Enabled: true
        Logging:
          Bucket: !Ref 'S3BucketLogsName'
          IncludeCookies: false
          Prefix: 'cdn/'
        Origins:
          - DomainName: !Ref 'S3BucketRootName'
            Id: !Sub 'S3-${AWS::StackName}-root'
            OriginAccessControlId: !Ref OriginAccessControl
            S3OriginConfig: {}
        PriceClass: 'PriceClass_All'
        ViewerCertificate:
          AcmCertificateArn: !Ref 'CertificateArn'
          MinimumProtocolVersion: 'TLSv1.1_2016'
          SslSupportMethod: 'sni-only'
      Tags:
        - Key: Solution
          Value: ACFS3

  URLRewriteFunction:
    Type: AWS::CloudFront::Function
    Condition: ShouldEnableUrlRewrite
    Properties:
      Name: !Sub
        - 'html-url-rewrite-${guid}'
        - guid: !Select [2, !Split ['/', !Ref 'AWS::StackId']]
      AutoPublish: true
      FunctionConfig:
        Comment: 'URL Rewrite /x.html to /x.'
        Runtime: cloudfront-js-1.0
      FunctionCode: |
        function handler(event) {
          var request = event.request;
          var uri = request.uri;

          // Append index.html if URI ends with a slash
          if (uri.endsWith('/')) {
            request.uri += 'index.html';
          }
          // Append .html if no file extension
          else if (!uri.includes('.')) {
            request.uri += '.html';
          }

          return request;
        }

  RedirectToWWWFunction:
    Type: AWS::CloudFront::Function
    Condition: ShouldRedirectToWWW
    Properties:
      Name: !Sub
        - 'redirect-to-www-${guid}'
        - guid: !Select [2, !Split ['/', !Ref 'AWS::StackId']]
      AutoPublish: true
      FunctionConfig:
        Comment: 'Redirect https://example.com to https://www.example.com.'
        Runtime: cloudfront-js-1.0
      FunctionCode: !Sub |
        function handler(event) {
          var request = event.request;
          var headers = request.headers;

          // Get the host header
          var hostHeader = headers.host && headers.host && headers.host.value;

          // Replace with the root domain
          if (hostHeader === '${DomainName}') {
              return {
                  statusCode: 301,
                  statusDescription: 'Moved Permanently',
                  headers: {
                      location: {
                          value: 'https://www.${DomainName}' + request.uri
                      }
                  }
              };
          }

          return request;
        }

  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        # Get a unique ID for the OAC Config name.
        # Name must be unique within account
        Name: !Sub
          - amzn-secure-static-site-${guid}
          - guid: !Select [2, !Split ['/', !Ref 'AWS::StackId']]
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  ResponseHeadersPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Sub '${AWS::StackName}-static-site-security-headers'
        SecurityHeadersConfig:
          StrictTransportSecurity:
            AccessControlMaxAgeSec: 63072000
            IncludeSubdomains: true
            Override: true
            Preload: true
          ContentSecurityPolicy:
            ContentSecurityPolicy: "default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'"
            Override: true
          ContentTypeOptions:
            Override: true
          FrameOptions:
            FrameOption: DENY
            Override: true
          ReferrerPolicy:
            ReferrerPolicy: 'same-origin'
            Override: true
          XSSProtection:
            ModeBlock: true
            Override: true
            Protection: true

Outputs:
  CloudFrontDistribution:
    Description: CloudFront distribution
    Value: !GetAtt CloudFrontDistribution.DomainName

  CloudFrontDomainName:
    Description: Website address
    Value: !Sub '${SubDomain}.${DomainName}'
